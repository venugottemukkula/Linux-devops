Module 1 : Application Development Fundamentals	-- Java , Eclipse IDE,Maven,Tomcat
Module 5 : Managing Source Code – Git and GitHub -- Gitbash	
Module 6 : Understanding and Using Build Tools --- Maven
Module 3 : Linux Fundamentals -- Any ubuntu version os 
Module 2 : Structure Query Language (SQL) --- Postgresql	
Module 7 : Continuous Testing with Selenium
Module 4 : DevOps Overview
Module 8 : Continuous Integration Using Jenkins	
Module 11 : Containerization, Docker, and Docker Hub -- Docker Desktop
Module 12 : Container Orchestration Tool : Kubernetes -- minikube or kubectl
Module 10 : Configuration Automation using Ansible
Module 14 : DevOps on Cloud ( AWS)
Module 2 : AWS Fundamentals		
Module 13 : Continuous Monitoring using Prometheus and Grafana
Module 15 : Terraform Overview
=================================
Eclipse 
https://www.eclipse.org/downloads/packages/release/helios/sr1/eclipse-ide-java-ee-developers
Tomcat 
https://tomcat.apache.org/download-90.cgi
64-bit Windows zip (pgp, sha512)
Java
https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html

Maven 
https://maven.apache.org/download.cgi

Git 
https://git-scm.com/

Installation of Python
Download Anaconda
https://www.anaconda.com/products/distribution


Installation steps for postgresql
https://www.guru99.com/download-install-postgresql.html
https://www.postgresql.org/download/windows/


Form link
https://docs.google.com/spreadsheets/d/1rfmUhMPmC8pSsJ9JLT4-gVIwhYG4A70WXmdAwbvmOtg/edit#gid=0
============================
GIT:
----
Git 
Git is a distributed version control system and repository.it is used to keep all the files inside the repositories related to project

How to check your Git configuration: 
The command below returns a list of information about your git configuration including user name and email: 
git config -l 
How to setup your Git username:  ==> git config --global user.name "Fabio"
 
How to setup your Git user email: ==> git config --global user.email "signups@fabiopacifici.com" 
How to cache your login credentials in Git:  ==> git config --global credential.helper cache 
How to initialize a Git repo:  ==> git init 
How to add a file to the staging area in Git ==> git add filename git clone is how you get a local copy of an existing repository to work on. ( only file related data is added)
How to add a all files to the staging area in Git ==> git add .
 
How to add only certain files to the staging area in Git ==> git add fil* 
With the asterisk in the command below, you can add all files starting with 'fil' in the staging area. 

How to check a repository's status in Git ==> git status 
This command will show the status of the current repository including staged, upstaged, and untracked files. 

How to commit changes in the editor in Git ==> git commit 
This command will open a text editor in the terminal where you can write a full commit message. 
A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it. 

How to commit changes with a message in Git ==> git commit -m "your commit message here"
You can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message. 
 
How to commit changes (and skip the staging area) in Git ==> git commit -a -m"your commit message here" 
You can add and commit tracked files with a single command by using the -a and -m options. 


How to see your commit history in Git ==> git log 
This command shows the commit history for the current repository: 

How to see your commit history including changes in Git: 
This command shows the commit's history including all files and their changes: 
git log -p 
How to see a specific commit in Git ==> git show commit-id 
This command shows a specific commit. 
Replace commit-id with the id of the commit that you find in the commit log after the word commit. 

How to see log status in Git: 
This command will cause the Git log to show some statistics about the changes in each commit, including line(s) changed and file names. 
git log --start 

How to remove tracked files from the current working tree in Git ==> git rm filename 
This command expects a commit message to explain why the file was deleted. 
 
How to revert unstaged changes in Git ==> git checkout filename 

How to revert staged changes in Git: ==> git reset HEAD filename   git reset HEAD -p 
You can use the -p option flag to specify the changes you want to reset. 
 

How to rollback an old commit in Git ==> git revert commit_id_here 
You can revert an old commit using its commit id. This opens the editor so you can add a commit message. 

How to create a new branch in Git ==> git branch branch_name 
By default, you have one branch, the main branch. With this command, you can create a new branch. Git won't switch to it automatically – you will need to do it manually with the next command. 

How to switch to a newly created branch in Git ==> git checkout branch_name
When you want to use a different or a newly created branch you can use this command: 

How to list branches in Git ==> git branch 
It will show a list of all branches and mark the current branch with an asterisk and highlight it in green. 

How to create a branch in Git and switch to it immediately ==> git checkout -b branch_name
In a single command, you can create and switch to a new branch right away. 
 
How to delete a branch in Git ==> git branch -d branch_name
When you are done working with a branch and have merged it, you can delete it using the command below: 
 
How to merge two branches in Git ==> git merge branch_name
To merge the history of the branch you are currently in with the branch_name, you will need to use the command below: 
 

How to add a remote repository in Git 
This command adds a remote repository to your local repository (just replace https://repo_here with your remote repo URL). 
git add remote https://repo_here 

How to see remote URLs in Git ==> git remote -v
You can see all remote repositories for your local repository with this command: 
 
How to get more info about a remote repo in Git ==> git remote show origin 
Just replace origin with the name of the remote obtained by running the git remote -v command. 

How to push changes to a remote repo in Git ==> 
When all your work is ready to be saved on a remote repository, you can push all changes using the command below: 
 
How to pull changes from a remote repo in Git ==> git pull 
If other team members are working on your repository, you can retrieve the latest changes made to the remote repository with the command below: 

How to fetch remote repo changes in Git ==> git fetch
This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead). 
 
How to check the current commits log of a remote repo in Git ==> git log origin/main 
Commit after commit, Git builds up a log. You can find out the remote repository log by using this command: 

How to merge a remote repo with your local repo in Git ==> git merge origin/main 
If the remote repository has changes you want to merge with your local, then this command will do that for you: 

How to push a new branch to a remote repo in Git ==> git push -u origin branch_name 
If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream: 

How to remove a remote branch in Git ==> git push --delete origin branch_name_here 
If you no longer need a remote branch you can remove it using the command below: 

How to use Git rebase ==> git rebase branch_name_here
You can transfer completed work from one branch to another using git rebase. 
 

How to force a push request in Git ==> git push -f 
This command will force a push request. This is usually fine for pull request branches because nobody else should have cloned them. But this isn't something that you want to do with public repos. 

Conclusion 
These commands can dramatically improve your productivity in Git. You don't have to remember them all – that's why I have written this cheat sheet. Bookmark this doc for future reference or print it if you like. 
…………………………………………………………………………………………… 
EXAMPLE:
--------
Initialize the gitlearning directory 
$git init

Open an explorer create few files to be added in local repository
Now on git bash execute below commad to add all the files in the staging
$ git add . 

Now commit the files in the git repo
$ git commit -m "First commit"

Then push
$git push origin master

Then verify on github.com inside repo that our changes from local repo is present on remote repo or not
I added a new file in a remote repo in a master branch
Then I want to take update in local repo
$ git pull origin master
===================================
MAVEN:
------
what is Maven ==> Apache Maven is a build tool  used to generate wither JAR file or WAR file.
why maven: or Lifecycle methods
	mvn compile: compile the source code
	mvn test: Running Tests(unit tests and functional tests)
	mvn package: Packaging the results into JARs, WARs ,EARs etc.
	mvn install: it will install all dependencies and packge them into either JAR or WAR

Repository is where the build artifacts are stored.
There are two types of repositories
Local ==> inside c/.m2 
Remote  ==> maven repository
Central Repository ==> Third party(nexus)
POM (Project Object Model)
it will maintain all info realted to project like

========================
LINUX:
------
It is a Operating System(is an interface(mediator) between machine and user).
Directories:
------------
/home ==> home directory of the user
/var ==> storing the log files 
	/var/log/message => OS related Debug Info
/etc ==> for configuration files EX: username, password,port numbers
/tmp ==> for storing temporary files
/opt ==> third party softwares EX: java,  mysql etc..
/lib ==> for storing libraies 64-bit, 32-bit
/root ==> it is like home directory it has administraotr/Highest previligeces. It has unrestricted access
/bin ==> storing binary files
/dev ==> shows information like external devices(hardwares, pendrives)

Commands
------------
ls ==> list of all files
ls -l ==> long list  format
ls   -l ==> To display directory structure
ls -lrt ==> To display timestmp in reverce order
pwd ==> present working directory
mkdir ==> create directory
cd ==> change directory
mkdir -p /a/b/c==> a,b directory 
 touch 1 2 3 ==> to create dummy files
 date ==> To see the timestamp
 rm 1 ==> remove 1 file
 Rm dir ==> Remove Directory
 Rm -rf /a ==> To remove all files {Don't use}
 rm -rf /==> machine all date removed {Don't use}
cp filefile 123 ==> will create create file 123 and date in file
vi file ==> To edit file
cat file 123 ==> To display conect of file 123
cd .. ==> go back to previous directory

SQL:
----
SQL stands for Structred Query Language. Its also called as RDBMS(relational database management system)
Data : collection of information related to one Object(Employee)
Database : ollection of information related to all Objects
DBMS: A database with management system services like insert, update, delete..)
Data stored in the form of tables
Table is a colletion of rows and columns
rows also known as Recored, Columns also known as Fields
SQL * PULS: it acts as  interface(mediator) between user and database.
SQL COMMONDS:
-------------
DDL(data definition Language) : CREATE, ALTER, DROP, TRUNCATE, RENAME
DML(data Manipulation Lanuage) : INSERT, UPDATE, DELETE
DCL(data control Language) :GRANT, REVOKE
TCL(Transaction Control Language) : COMMIT, ROLLBACK
DRL/DQL(Data Retrieval/Query Language) : SELECT

create a table:
--------------
syntax:
create table <table_name>
(
<column-1> datatype(size),
<column-1> datatype(size),
<column-1> datatype(size)
);

CREATE TABLE EMPLOYEE (  
eid number(5),
ename varchar(20),
esal number(6)
);

insert values:
--------------
insert into <table_name> values (- ,-,-,-,);

insert into EMPLOYEE values (111,'venu', 1000);  
insert into EMPLOYEE values (222,'vishnu', 2000);
insert into EMPLOYEE values (333,'subbu', 3000);
insert into EMPLOYEE values (444,'venkey', 4000);
insert into EMPLOYEE values (555,'gifty', 5000);


select:
-------
select * from EMPLOYEE; yo display info about employee table
select * from tab; ==> To display all tables
describe customer; => to describr table information
insert into employee values(&eid, '&employee', &esal); ==> to insert values dynalically
to insert multiple values at a time
insert all
into employee values(777, 'rudra', 1500)
into employee values(888, 'bhairava', 1600)
into employee values(999, 'charan', 1700)
select * from dual
/

